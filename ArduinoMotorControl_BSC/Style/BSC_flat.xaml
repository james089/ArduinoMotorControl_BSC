<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing">

    <!-- Integers-->
    <Thickness x:Key="BorderThickness">0</Thickness>
    <Thickness x:Key="BorderThicknessSmall">1.5</Thickness>
    <CornerRadius x:Key="CornerRadius">5</CornerRadius>
    <CornerRadius x:Key="CornerRadius_big">15</CornerRadius>

    <!-- Effect -->
    <DropShadowEffect x:Key="SmallShadow" Opacity="1" ShadowDepth="0.2" Direction="360"/>
    
    <!-- LinearGradientBrush-->
    <LinearGradientBrush x:Key="BorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#66838383" Offset="0"/>
        <GradientStop Color="#662C2C2C" Offset="0.75"/>
        <GradientStop Color="#662C2C2C" Offset="0.5"/>
        <GradientStop Color="#66474747" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="Green_radient_dark" EndPoint="0.5,1"  StartPoint="0.5,0">
        <GradientStop Color="#FF004414" Offset="0"/>
        <GradientStop Color="#FF00290B" Offset="0.5"/>
        <GradientStop Color="#FF004414" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="Green_radient_bright" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF00CD00"/>
        <GradientStop Color="#FF00CD00" Offset="1"/>
        <GradientStop Color="#FF93FF93" Offset="0.5"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="Blue_radient_dark" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF42738A" Offset="0"/>
        <GradientStop Color="#FF42738A" Offset="1"/>
        <GradientStop Color="#FF283F4A" Offset="0.5"/>
    </LinearGradientBrush>
    
    <LinearGradientBrush x:Key="Blue_radient_bright" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF00A3FF" Offset="0"/>
        <GradientStop Color="#FF00A3FF" Offset="1"/>
        <GradientStop Color="#FF6FCBFF" Offset="0.5"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="Red_radient_dark"  EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF0E0000" Offset="0"/>
        <GradientStop Color="#FF0E0000" Offset="1"/>
        <GradientStop Color="#FF870000" Offset="0.5"/>
    </LinearGradientBrush>
    
    <!-- Background Color-->
    <LinearGradientBrush x:Key="Background_red"  EndPoint="0.5,1" StartPoint="0.5,0"> 
        <GradientStop Color="#FF300000" Offset="0"/>
        <GradientStop Color="Black" Offset="1"/>
        <GradientStop Color="#FF130000" Offset="0.5"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="Background_blue" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF000B49" Offset="0"/>
        <GradientStop Color="Black" Offset="1"/>
        <GradientStop Color="#FF000313" Offset="0.49"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="Background_gray" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF363636" Offset="0"/>
        <GradientStop Color="Black" Offset="1"/>
        <GradientStop Color="#FF151515" Offset="0.5"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="Background_white" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFE6E6E6" Offset="0"/>
        <GradientStop Color="#FFACACAC" Offset="1"/>
    </LinearGradientBrush>

    <!--Transparent gradient color-->
    <LinearGradientBrush x:Key="Gray_trans_gradient" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#CC363636" Offset="0"/>
        <GradientStop Color="#CC000000" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="Green_trans_gradient" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#CC00CD00" Offset="0"/>
        <GradientStop Color="#CC004414" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="Red_trans_gradient" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#CC870000" Offset="0"/>
        <GradientStop Color="#CC3E0000" Offset="1"/>
    </LinearGradientBrush>
    
    <!-- Normal Colors -->
    <SolidColorBrush x:Key="GrayColor">#FF666666</SolidColorBrush>
    <SolidColorBrush x:Key="DarkGrayColor">#FF303030</SolidColorBrush>
    <SolidColorBrush x:Key="DarkerGrayColor">#FF1D1D1D</SolidColorBrush>
    <SolidColorBrush x:Key="TransGrayColor">#E5666666</SolidColorBrush>
    <SolidColorBrush x:Key="TransDarkGrayColor">#E5303030</SolidColorBrush>
    <SolidColorBrush x:Key="SuperTransGrayColor">#4C303030</SolidColorBrush>
    <SolidColorBrush x:Key="BrightRedColor">#FFFF0000</SolidColorBrush>
    <SolidColorBrush x:Key="RedColor">#FF870000</SolidColorBrush>
    <SolidColorBrush x:Key="DarkRedColor">#FF3E0000</SolidColorBrush>
    <SolidColorBrush x:Key="YellowColor">#FFFFFF00</SolidColorBrush>
    <SolidColorBrush x:Key="BlueColor">#FF00A3FF</SolidColorBrush>
    <SolidColorBrush x:Key="DarkBlueColor">#FF42738A</SolidColorBrush>
    <SolidColorBrush x:Key="DarkerBlueColor">#FF283F4A</SolidColorBrush>
    <SolidColorBrush x:Key="BrightGreenColor">#FF93FF93</SolidColorBrush>
    <SolidColorBrush x:Key="GreenColor">#FF00CD00</SolidColorBrush>
    <SolidColorBrush x:Key="DarkGreenColor">#FF004414</SolidColorBrush>

    <!-- ========================================================================Styles=======================================================  -->
    <!-- General -->
    <!-- Fonts -->
    <FontFamily x:Key="FontGeneral">Segoe WP SemiLight</FontFamily>
    <SolidColorBrush x:Key="FontColor">#FFFFFFFF</SolidColorBrush>

    <Style TargetType="{x:Type Window}" >
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontFamily" Value="{DynamicResource FontGeneral}" />
        <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
        <Setter Property="Background" Value="#FF000000"/>
    </Style>

    <Style x:Key="baseStyle" TargetType="{x:Type Control}" >
        <Setter Property="FontSize" Value="16" />
        <Setter Property="MinWidth" Value="50" />
        <Setter Property="MinHeight" Value="35" />
        <Setter Property="FontFamily" Value="{DynamicResource FontGeneral}" />
        <Setter Property="Foreground" Value="{DynamicResource FontColor}" />
    </Style>

    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <!-- Button Styles -->

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Background" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Background" BorderThickness="{DynamicResource BorderThickness}" CornerRadius="{DynamicResource CornerRadius}" 
                    Background="{TemplateBinding Background}" BorderBrush="{DynamicResource BorderBrush}">
                        <Grid>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="#66666666" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  x:Key="ArrowButton_right" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ed:BlockArrow x:Name="Arrow" Fill="{DynamicResource BlueColor}" Orientation="Right" VerticalAlignment="Stretch" Width="Auto" Margin="10" RenderTransformOrigin="0.5,0.5">
                        <ed:BlockArrow.RenderTransform>
                            <TransformGroup>
                                <RotateTransform Angle="0"/>
                            </TransformGroup>
                        </ed:BlockArrow.RenderTransform>
                    </ed:BlockArrow>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DarkBlueColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  x:Key="ArrowButton_left" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ed:BlockArrow x:Name="Arrow" Fill="{DynamicResource BlueColor}" Orientation="Right" VerticalAlignment="Stretch" Width="Auto" Margin="10" RenderTransformOrigin="0.5,0.5">
                        <ed:BlockArrow.RenderTransform>
                            <TransformGroup>
                                <RotateTransform Angle="180"/>
                            </TransformGroup>
                        </ed:BlockArrow.RenderTransform>
                    </ed:BlockArrow>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DarkBlueColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  x:Key="ArrowButton_up" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ed:BlockArrow x:Name="Arrow" Fill="{DynamicResource BlueColor}" Orientation="Right" VerticalAlignment="Stretch" Width="Auto" Margin="10" RenderTransformOrigin="0.5,0.5">
                        <ed:BlockArrow.RenderTransform>
                            <TransformGroup>
                                <RotateTransform Angle="-90"/>
                            </TransformGroup>
                        </ed:BlockArrow.RenderTransform>
                    </ed:BlockArrow>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DarkBlueColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  x:Key="ArrowButton_down" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ed:BlockArrow x:Name="Arrow" Fill="{DynamicResource BlueColor}" Orientation="Right" VerticalAlignment="Stretch" Width="Auto" Margin="10" RenderTransformOrigin="0.5,0.5">
                        <ed:BlockArrow.RenderTransform>
                            <TransformGroup>
                                <RotateTransform Angle="90"/>
                            </TransformGroup>
                        </ed:BlockArrow.RenderTransform>
                    </ed:BlockArrow>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DarkBlueColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  x:Key="ArrowButton_CW" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Viewbox>
                        <Grid RenderTransformOrigin="0.5,0.5" Width="100" Height="100">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleY="1" ScaleX="1"/>
                                </TransformGroup>
                            </Grid.RenderTransform>
                            <ed:Arc Margin="10" x:Name="Arrow" StartAngle="0" EndAngle="270" ArcThickness="15" Fill="{DynamicResource BlueColor}"/>
                            <ed:RegularPolygon Fill="{DynamicResource BlueColor}" Height="20" InnerRadius="1" PointCount="3" Stretch="Fill" Width="35" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,30,0,0"/>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DarkBlueColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  x:Key="ArrowButton_CCW" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Viewbox>
                        <Grid RenderTransformOrigin="0.5,0.5" Width="100" Height="100">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleY="1" ScaleX="-1"/>
                                </TransformGroup>
                            </Grid.RenderTransform>
                            <ed:Arc Margin="10" x:Name="Arrow" StartAngle="0" EndAngle="270" ArcThickness="15" Fill="{DynamicResource BlueColor}"/>
                            <ed:RegularPolygon Fill="{DynamicResource BlueColor}" Height="20" InnerRadius="1" PointCount="3" Stretch="Fill" Width="35" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,30,0,0"/>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DarkBlueColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  x:Key="Button_logout" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnPressed" AutoReverse="True">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="Slider">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="100"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Text">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>

                    </ControlTemplate.Resources>
                    <Viewbox>
                        <Border Background="{DynamicResource TransDarkGrayColor}" CornerRadius="50" Width="200" Height="100">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*"/>
                                    <ColumnDefinition Width="1*"/>
                                </Grid.ColumnDefinitions>
                                <Viewbox>
                                    <Grid x:Name="Slider" Margin="1" Width="100" Height="100">
                                        <Grid.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Grid.RenderTransform>
                                        <Grid.Effect>
                                            <DropShadowEffect Opacity="0.5" ShadowDepth="3"/>
                                        </Grid.Effect>
                                        <Ellipse x:Name="Slider_border" Fill="{DynamicResource RedColor}" Width="100" HorizontalAlignment="Left" >
                                        </Ellipse>
                                        <ed:BlockArrow Fill="White" Height="40" Orientation="Right" Margin="10" Width="50" />
                                    </Grid>
                                </Viewbox>
                                <Label x:Name="Text" Content="LOGOUT" Grid.Column="1" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" FontSize="22"/>
                            </Grid>
                        </Border>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource OnPressed}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource GrayColor}" />
                            <Setter TargetName="Slider_border" Property="Fill" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  x:Key="Button_minimize" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Viewbox>
                        <Grid x:Name="Background" Width="100" Height="100">
                            <Rectangle x:Name="Rect" Fill="White" Margin="30,60,30,30"/>
                            <Rectangle Fill="Transparent"/>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BlueColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Rect" Property="Fill" Value="{DynamicResource GrayColor}"/>
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  x:Key="Button_close" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Viewbox>
                        <Grid x:Name="Background" Width="100" Height="100">
                            <Rectangle x:Name="Rect" Fill="White" Width="10" Height="40" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform AngleX="45"/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>

                            <Rectangle x:Name="Rect2" Fill="White" Width="10" Height="40" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform AngleX="-45"/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>

                            <Rectangle Fill="Transparent"/>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BlueColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Rect" Property="Fill" Value="{DynamicResource GrayColor}"/>
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  x:Key="Button_enter" TargetType="{x:Type Button}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="MinHeight" Value="50" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="Transparent" BorderThickness="0,0.5" BorderBrush="{DynamicResource GrayColor}">
                        <Grid x:Name="all" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="50"/>
                            </Grid.ColumnDefinitions>
                            <Path Grid.Column="1" Data="M8,0 L12,4 16,8 12,8 8,4 4,8 0,8 4,4 z" Fill="{DynamicResource TransGrayColor}" HorizontalAlignment="Stretch" Height="15" Stretch="Fill" VerticalAlignment="Center" Width="30" RenderTransformOrigin="0.5,0.5" Margin="0">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="90"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center" Margin="5"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="all" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  x:Key="Button_back" TargetType="{x:Type Button}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="MinHeight" Value="50" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="all" Background="Transparent" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50"/>
                            <ColumnDefinition Width="1*"/>
                        </Grid.ColumnDefinitions>
                        <Path Grid.Column="0" Data="M8,0 L12,4 16,8 12,8 8,4 4,8 0,8 4,4 z" Fill="{DynamicResource TransGrayColor}" HorizontalAlignment="Stretch" Height="15" Stretch="Fill" VerticalAlignment="Center" Width="30" RenderTransformOrigin="0.5,0.5" Margin="0">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="-90"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" Grid.Column="1" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="all" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Button_login" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border Background="Transparent"/>
                        <Path x:Name="Background" Data="M100,50 C100,77.614237 77.614237,100 50,100 C22.385763,100 0,77.614237 0,50 C0,22.385763 22.385763,0 50,0 C77.614237,0 100,22.385763 100,50 z M80.000002,50 L60.000002,69.999998 60.000002,55 20.000002,55 20.000002,45 60.000002,45 60.000002,29.999998 z" 
                  Fill="{DynamicResource TransGrayColor}" Stretch="Fill"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Background" Property="Fill" Value="#66666666" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Fill" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Button_login_back" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border Background="Transparent" />
                        <Path x:Name="Background" Data="M100,50 C100,77.614237 77.614237,100 50,100 C22.385763,100 0,77.614237 0,50 C0,22.385763 22.385763,0 50,0 C77.614237,0 100,22.385763 100,50 z M26.715729,50 L33.786797,42.928932 55,21.715729 62.071068,28.786797 40.857864,50 62.071068,71.213203 55,78.284271 33.786797,57.071068 z" 
                  Fill="{DynamicResource TransGrayColor}" Stretch="Fill"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Background" Property="Fill" Value="#66666666" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Fill" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToggleButton Style -->
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="MinWidth" Value="50" />
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Background"
                        BorderThickness="{DynamicResource BorderThickness}" 
                        CornerRadius="{DynamicResource CornerRadius}" 
                        BorderBrush="{DynamicResource BorderBrush}">
                        <Label Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" 
                               HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Width="Auto" Height="Auto"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BlueColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource DarkerBlueColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleButton_iosStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="Template">
        <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnChecked">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="Button">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="80">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CubicEase EasingMode="EaseInOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Background">
                                <EasingColorKeyFrame KeyTime="0" Value="White"/>
                                <EasingColorKeyFrame KeyTime="0:0:0.2" Value="#FF00CD00"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="OnUnchecked">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="Button">
                                <EasingDoubleKeyFrame KeyTime="0" Value="80"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CubicEase EasingMode="EaseInOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Background">
                                <EasingColorKeyFrame KeyTime="0" Value="#FF00CD00"/>
                                <EasingColorKeyFrame KeyTime="0:0:0.2" Value="White"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Viewbox>
                        <Grid Width="200" Height="120">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="1*"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle x:Name="Background" Fill="White" RadiusY="60" RadiusX="60" Grid.ColumnSpan="5" StrokeThickness="2" Stroke="#FFB8B8B8" />
                            <Ellipse x:Name="Button" Fill="White" Grid.ColumnSpan="3" Stroke="#FFE4E4E4" StrokeThickness="0.5" Margin="1">
                                <Ellipse.Effect>
                                    <DropShadowEffect Opacity="0.5" ShadowDepth="5" Direction="300"/>
                                </Ellipse.Effect>
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource OnChecked}" />
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource OnUnchecked}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="Fill" Value="Gray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
    </Setter>
    </Style>

    <Style x:Key="ToggleButton_powerButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Red_Button" BorderThickness="{DynamicResource BorderThickness}" CornerRadius="{DynamicResource CornerRadius}"
                    BorderBrush="{DynamicResource BorderBrush}">
                        <!-- To specify fixed size is important, because viewbox is stretchable. doesn't have a size-->
                        <Grid >
                            <Viewbox>
                                <Grid Width="296" Height="146">
                                    <ed:Arc ArcThickness="0" Stretch="None" Margin="100,25" StartAngle="40" EndAngle="320" RenderTransformOrigin="0.5,0.5" StrokeThickness="15" StrokeEndLineCap="Round" StrokeStartLineCap="Round" >
                                        <ed:Arc.Stroke>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="#FFB9B9B9" Offset="1"/>
                                                <GradientStop Color="White"/>
                                            </LinearGradientBrush>
                                        </ed:Arc.Stroke>
                                    </ed:Arc>
                                    <Rectangle HorizontalAlignment="Center" Width="15" Height="55" VerticalAlignment="Top" Margin="0,20,0,0" RadiusX="10" RadiusY="10" >
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="#FFD1D1D1" Offset="1"/>
                                                <GradientStop Color="White"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Grid>
                            </Viewbox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Red_Button" Property="Background" Value="{DynamicResource GreenColor}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Red_Button" Property="Background" Value="{DynamicResource DarkRedColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Red_Button" Property="Background" Value="Gray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleButton_greenButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Green_Button" BorderThickness="{DynamicResource BorderThickness}" CornerRadius="{DynamicResource CornerRadius}"  BorderBrush="{DynamicResource BorderBrush}">
                        <!-- To specify fixed size is important, because viewbox is stretchable. doesn't have a size-->
                        <Grid >
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Green_Button" Property="Background" Value="{DynamicResource GreenColor}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Green_Button" Property="Background" Value="{DynamicResource DarkGreenColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Green_Button" Property="Background" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleButton_comboBox" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Background"
                                BorderThickness="{DynamicResource BorderThickness}" 
                                CornerRadius="{DynamicResource CornerRadius}" >
                        <Grid>
                            <ed:RegularPolygon x:Name="Arrow" HorizontalAlignment="Right" Fill="{DynamicResource GrayColor}" InnerRadius="1" PointCount="3" RenderTransformOrigin="0.5,0.5" Height="5" Width="10" Margin="10,0">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="180"/>
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BlueColor}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="White" />
                            <Setter TargetName="Arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="0"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BorderBrush}" />
                            <Setter TargetName="Arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderHeader_down" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Background"
                                BorderThickness="{DynamicResource BorderThickness}" 
                                CornerRadius="{DynamicResource CornerRadius}" >
                        <Grid>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />   <!-- This is the content -->
                            <ed:RegularPolygon Grid.Column="1" x:Name="Arrow" HorizontalAlignment="Right" Fill="{DynamicResource GrayColor}" InnerRadius="1" PointCount="3" RenderTransformOrigin="0.5,0.5" Height="5" Width="10" Margin="10,0">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="180"/>
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BorderBrush}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="White" />
                            <Setter TargetName="Arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="0"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BorderBrush}" />
                            <Setter TargetName="Arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderHeader_up" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Background"
                                BorderThickness="{DynamicResource BorderThickness}" 
                                CornerRadius="{DynamicResource CornerRadius}" >
                        <Grid>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <!-- This is the content -->
                            <ed:RegularPolygon Grid.Column="1" x:Name="Arrow" HorizontalAlignment="Right" Fill="{DynamicResource GrayColor}" InnerRadius="1" PointCount="3" RenderTransformOrigin="0.5,0.5" Height="5" Width="10" Margin="10,0">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="0"/>
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BorderBrush}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="White" />
                            <Setter TargetName="Arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BorderBrush}" />
                            <Setter TargetName="Arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="0"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderHeader_right" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Background" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="False" 
                                BorderThickness="{DynamicResource BorderThickness}" 
                                CornerRadius="{DynamicResource CornerRadius}" >
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="40" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <ed:RegularPolygon x:Name="Arrow" HorizontalAlignment="Right" Fill="{DynamicResource GrayColor}" InnerRadius="1" PointCount="3" RenderTransformOrigin="0.5,0.5" Height="5" Width="10" Margin="10,0">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="-90"/>
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>

                            <ContentPresenter Grid.Row="1" VerticalAlignment="Top" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                                <ContentPresenter.RenderTransform>
                                    <RotateTransform Angle="-90"/>
                                </ContentPresenter.RenderTransform>
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BorderBrush}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="White" />
                            <Setter TargetName="Arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BorderBrush}" />
                            <Setter TargetName="Arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderHeader_left" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Background" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="False" 
                                BorderThickness="{DynamicResource BorderThickness}" 
                                CornerRadius="{DynamicResource CornerRadius}" >
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="40" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <ed:RegularPolygon x:Name="Arrow" HorizontalAlignment="Right" Fill="{DynamicResource GrayColor}" InnerRadius="1" PointCount="3" RenderTransformOrigin="0.5,0.5" Height="5" Width="10" Margin="10,0">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="90"/>
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>

                            <ContentPresenter Grid.Row="1" VerticalAlignment="Top" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                                <ContentPresenter.RenderTransform>
                                    <RotateTransform Angle="90"/>
                                </ContentPresenter.RenderTransform>
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BorderBrush}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="White" />
                            <Setter TargetName="Arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BorderBrush}" />
                            <Setter TargetName="Arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Radio Button -->
    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="Background" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="0.5,0">
                        <Grid>
                            <Label x:Name="lbl" Content="{TemplateBinding Content}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="lbl" Property="Foreground" Value="White" />
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BlueColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="lbl" Property="Foreground" Value="White" />
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource DarkerBlueColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="lbl" Property="Foreground" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Radio_left" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="Background" BorderBrush="{DynamicResource BorderBrush}" CornerRadius="5,0,0,5" BorderThickness="0,0,0.5,0">
                        <Grid>
                            <Label x:Name="lbl" Content="{TemplateBinding Content}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="lbl" Property="Foreground" Value="White" />
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BlueColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="lbl" Property="Foreground" Value="White" />
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource DarkerBlueColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="lbl" Property="Foreground" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Radio_right" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="Background" BorderBrush="{DynamicResource BorderBrush}" CornerRadius="0,5,5,0" BorderThickness="0.5,0,0,0">
                        <Grid>
                            <Label x:Name="lbl" Content="{TemplateBinding Content}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="lbl" Property="Foreground" Value="White" />
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BlueColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="lbl" Property="Foreground" Value="White" />
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource DarkerBlueColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="lbl" Property="Foreground" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Radio_top" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="Background" BorderBrush="{DynamicResource BorderBrush}" CornerRadius="5,5,0,0" BorderThickness="0,0,0,0.5">
                        <Grid>
                            <Label x:Name="lbl" Content="{TemplateBinding Content}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="lbl" Property="Foreground" Value="White" />
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BlueColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="lbl" Property="Foreground" Value="White" />
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource DarkerBlueColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="lbl" Property="Foreground" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Radio_bottom" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="Background" BorderBrush="{DynamicResource BorderBrush}" CornerRadius="0,0,5,5" BorderThickness="0,0,0,0.5">
                        <Grid>
                            <Label x:Name="lbl" Content="{TemplateBinding Content}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="lbl" Property="Foreground" Value="White" />
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BlueColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="lbl" Property="Foreground" Value="White" />
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource DarkerBlueColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="lbl" Property="Foreground" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Radio_vertical" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="Background" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="0,0.5">
                        <Grid>
                            <Label x:Name="lbl" Content="{TemplateBinding Content}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="lbl" Property="Foreground" Value="White" />
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource BlueColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="lbl" Property="Foreground" Value="White" />
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource DarkerBlueColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="lbl" Property="Foreground" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RadioButton_select" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Enlarge">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Radio">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.8"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="Radio">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.8"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Dot">
                                <EasingColorKeyFrame KeyTime="0" Value="#FF303030"/>
                                <EasingColorKeyFrame KeyTime="0:0:0.2" Value="White"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Decrease">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Radio">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.8"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="Radio">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.8"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Dot">
                                <EasingColorKeyFrame KeyTime="0" Value="White"/>
                                <EasingColorKeyFrame KeyTime="0:0:0.2" Value="#FF303030"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Viewbox>
                        <Grid x:Name="Radio" Width="150" Height="70" Background="{TemplateBinding Background}" RenderTransformOrigin="0.5,0.5">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0.8" ScaleY="0.8"/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Grid.RenderTransform>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="1*"/>
                                <RowDefinition Height="1*"/>
                            </Grid.RowDefinitions>
                            <Ellipse x:Name="Dot" Fill="{DynamicResource DarkGrayColor}" Width="20" Height="20" />
                            <Label Grid.Row="1" Foreground="{Binding Fill, ElementName=Dot}" Content="{TemplateBinding Content}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Enlarge}" />
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Decrease}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TextBox -->
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="CaretBrush" Value="{DynamicResource FontColor}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource BlueColor}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="Bd" Background="{DynamicResource TransGrayColor}" BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="{DynamicResource BorderThickness}" CornerRadius="{DynamicResource CornerRadius}">
                        <ScrollViewer x:Name="PART_ContentHost" Margin="2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource TransDarkGrayColor}" TargetName="Bd"/>
                            <Setter Property="Foreground" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- PasswordBox -->
    <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="CaretBrush" Value="{DynamicResource FontColor}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource BlueColor}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="Bd" Background="{DynamicResource TransGrayColor}" BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="{DynamicResource BorderThickness}" CornerRadius="{DynamicResource CornerRadius}">
                        <ScrollViewer x:Name="PART_ContentHost" Margin="2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource TransDarkGrayColor}" TargetName="Bd"/>
                            <Setter Property="Foreground" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- ComboBox -->
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="grid">
                        <ToggleButton x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                              ClickMode="Press"  Style="{StaticResource ToggleButton_comboBox}">
                        </ToggleButton>
                        <ContentPresenter HorizontalAlignment="Center" Margin="3,3,3,3" x:Name="ContentSite" VerticalAlignment="Center"
                                  Content="{TemplateBinding SelectionBoxItem}" 
                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
                        <TextBox Visibility="Hidden" HorizontalAlignment="Center" Margin="3,3,3,3" x:Name="PART_EditableTextBox" Style="{x:Null}" 
                         VerticalAlignment="Center" Focusable="True" IsReadOnly="{TemplateBinding IsReadOnly}"  />
                        <Popup x:Name="Popup" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="{DynamicResource TransGrayColor}" CornerRadius="{DynamicResource CornerRadius}" Margin="0,10,0,0" />
                                <ScrollViewer Margin="4,10,4,6" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True" >
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="Gray" />
                            <Setter Property="Opacity" TargetName="grid" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox" />
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Expander -->
    <Style TargetType="{x:Type Expander}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Appear">
                            <ObjectAnimationUsingKeyFrames  Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="border">
                                <DiscreteObjectKeyFrame  KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                                <DiscreteObjectKeyFrame  KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames  Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame  KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame  KeyTime="0:0:0.4" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Disappear">
                            <DoubleAnimationUsingKeyFrames  Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame  KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame  KeyTime="0:0:0.4" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames  Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="border">
                                <DiscreteObjectKeyFrame  KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                <DiscreteObjectKeyFrame  KeyTime="0:0:0.4" Value="{x:Static Visibility.Collapsed}"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,1" CornerRadius="3">
                        <DockPanel x:Name="dockPanel">
                            <ToggleButton 
                                  x:Name="HeaderSite" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                  ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                  IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top"
                                  Style="{StaticResource ExpanderHeader_down}">
                            </ToggleButton>
                            <Border Visibility="Collapsed" x:Name="border">
                                <ContentPresenter Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          x:Name="ExpandSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                          DockPanel.Dock="Bottom" />
                            </Border>
                        </DockPanel>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Appear}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Disappear}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Down" />
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderHeader_right}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderHeader_up}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderHeader_left}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Expander_arrow" TargetType="{x:Type Expander}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <DockPanel x:Name="dockPanel">
                        <ToggleButton  DockPanel.Dock="Bottom" 
                                  x:Name="HeaderSite" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                  ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                  IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                  Opacity="1">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Grid x:Name="Background" Background="Transparent" Height="Auto" d:LayoutOverrides="TopMargin, BottomMargin" >
                                        <Path x:Name="Arrow" Data="M8,0 L12,4 16,8 12,8 8,4 4,8 0,8 4,4 z" Fill="{DynamicResource GrayColor}" HorizontalAlignment="Center" Height="8" Stretch="Fill" VerticalAlignment="Center" Width="16" Margin="0" RenderTransformOrigin="0.5,0.5"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="true">
                                            <Setter TargetName="Arrow" Property="RenderTransform">
                                                <Setter.Value>
                                                    <RotateTransform Angle="180"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter TargetName="Arrow" Property="Fill" Value="White"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>

                            </ToggleButton.Template>
                        </ToggleButton>
                        <Border CornerRadius="{DynamicResource CornerRadius}" x:Name="border" Background="{DynamicResource TransDarkGrayColor}" Margin="0,0,0,0" Visibility="Collapsed">
                            <ContentPresenter Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        x:Name="ExpandSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                        DockPanel.Dock="Top" Margin="5" />
                        </Border>
                    </DockPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" TargetName="border" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ProgressBar -->
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource BlueColor}"/>
        <Setter Property="Background" Value="{DynamicResource TransGrayColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Viewbox>
                        <Grid Height="{TemplateBinding ActualHeight}" Width="{TemplateBinding ActualWidth}">
                            <Border x:Name="PART_Track" CornerRadius="{DynamicResource CornerRadius}" Background="{TemplateBinding Background}">
                            </Border>
                            <Border HorizontalAlignment="Left" 
                                    x:Name="PART_Indicator" CornerRadius="{DynamicResource CornerRadius}" 
                                    Background="{TemplateBinding Foreground}"  Effect="{DynamicResource SmallShadow}"/>
                        </Grid>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Slider -->
    <Style TargetType="{x:Type Slider}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Background" Value="{DynamicResource TransGrayColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="1*" />
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                            <RowDefinition Height="1*" />
                        </Grid.RowDefinitions>
                        <TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top" />
                        <Border Grid.Row="1" x:Name="Border" Height="10" CornerRadius="{DynamicResource CornerRadius}" Background="{TemplateBinding Background}" />
                        <Track Grid.Row="1" x:Name="PART_Track">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SliderThumb}" Width="30" />
                            </Track.Thumb>
                            <Track.DecreaseRepeatButton> <!--Add blue bar to fill the left side-->
                                <RepeatButton Style="{DynamicResource SliderRepeatButtonStyle}"/>
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick" />
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource GrayColor}" TargetName="Border" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Scroll Viewer and ScrollBar -->
    <Style TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" />
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" AutomationProperties.AutomationId="HorizontalScrollBar" MinHeight="20" />
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Orientation="Vertical" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" AutomationProperties.AutomationId="VerticalScrollBar" MinWidth="20" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Border x:Name="GridRoot" Background="{DynamicResource TransGrayColor}" CornerRadius="10">
                        <Grid >
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="5" />
                                <RowDefinition Height="1*" />
                                <RowDefinition MaxHeight="5" />
                            </Grid.RowDefinitions>
                            <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource ScrollBarThumb}"/>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PageUp" Style="{DynamicResource ScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand" />
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PageDown" Style="{DynamicResource ScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand" />
                                </Track.DecreaseRepeatButton>
                            </Track>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown" />
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Thumbs/Scroll Reapeat Buttons -->
    <Style x:Key="ScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SliderRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource BlueColor}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Border Height="10" Background="{TemplateBinding Background}">
                            <Border.CornerRadius>
                                <CornerRadius BottomLeft="5" TopLeft="5" />
                            </Border.CornerRadius>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SliderThumb" d:IsControlPart="True" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Ellipse x:Name="RoundThumb" Fill="White" Width="30" Height="30" Effect="{DynamicResource SmallShadow}">
                        </Ellipse>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="RoundThumb" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ScrollBarThumb" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch" Fill="{DynamicResource BlueColor}" x:Name="PressedRectangle"
                                   VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="8" RadiusY="8" Margin="2,8" 
                                   MinHeight="20" MinWidth="16" Effect="{DynamicResource SmallShadow}">
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False" >
                            <Setter Property="Opacity" TargetName="Grid" Value="0.1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- GroupBox -->
    <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Background" Value="{DynamicResource TransDarkGrayColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Border x:Name="Header" Padding="10,2" Background="{DynamicResource BorderBrush}" MinHeight="20" MinWidth="20" >
                            <Border.CornerRadius>
                                <CornerRadius TopLeft="5" TopRight="5" />
                            </Border.CornerRadius>
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" RecognizesAccessKey="True" Margin="0,5" HorizontalAlignment="Center" />
                        </Border>
                        <Border Grid.Row="1" BorderThickness="2,0,2,2" BorderBrush="#66212121" Padding="5" Background="{TemplateBinding Background}">
                            <Border.CornerRadius>
                                <CornerRadius BottomLeft="5" BottomRight="5" />
                            </Border.CornerRadius>
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Grid.Row="1" MinHeight="50" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Tab Control -->
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" x:Name="RowDefinition0" />
                            <RowDefinition Height="*" x:Name="RowDefinition1" />
                        </Grid.RowDefinitions>
                        <Border CornerRadius="5" Background="{x:Null}" x:Name="border">
                            <TabPanel x:Name="HeaderPanel" IsItemsHost="true" Panel.ZIndex="1" RenderTransformOrigin="0.5,0.5" Width="Auto" Height="Auto" MinHeight="20" MinWidth="20">
                                <TabPanel.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="0" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </TabPanel.LayoutTransform>
                                <TabPanel.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </TabPanel.RenderTransform>
                            </TabPanel>
                        </Border>
                        <Border x:Name="ContentPanel" Grid.Column="0" Grid.Row="1" 
                                Background="{DynamicResource DarkGrayColor}" 
                                CornerRadius="5,5,5,5" 
                                Padding="5">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" />
                        </Border>
                        <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" 
                                BorderThickness="0,0,0,0" CornerRadius="0,0,0,0" Opacity="0.5" Margin="2,0,2,0" 
                                x:Name="border1">
                            <Border.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </Border.LayoutTransform>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Grid.Row" TargetName="border" Value="1"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Grid.Column" TargetName="border" Value="0"/>
                            <Setter Property="Margin" TargetName="border" Value="0,0,0,0"/>
                            <Setter Property="Margin" TargetName="ContentPanel" Value="0,0,0,0"/>
                            <Setter Property="LayoutTransform" TargetName="border1">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Grid.Column" TargetName="border" Value="1"/>
                            <Setter Property="LayoutTransform" TargetName="border1">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="90"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Grid.Column" TargetName="border1" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style d:IsControlPart="True" TargetType="{x:Type TabItem}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Background" Value="{DynamicResource DarkBlueColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="grid" Margin="1" SnapsToDevicePixels="True">
                        <Grid.LayoutTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                <SkewTransform AngleX="0" AngleY="0"/>
                                <RotateTransform Angle="0"/>
                                <TranslateTransform X="0" Y="0"/>
                            </TransformGroup>
                        </Grid.LayoutTransform>
                        <Border x:Name="border" BorderBrush="{x:Null}" CornerRadius="5" Background="{TemplateBinding Background}">
                        </Border>
                        <Grid>
                            <ContentPresenter x:Name="ContentSite" RecognizesAccessKey="True" ContentSource="Header" d:LayoutOverrides="Width, Height" HorizontalAlignment="Center" Margin="10,5,10,5" VerticalAlignment="Center" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="LayoutTransform" TargetName="grid">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="-90" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="LayoutTransform" TargetName="grid">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="90" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="LayoutTransform" TargetName="ContentSite">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="180" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="LayoutTransform" TargetName="grid">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="Gray"/>
                            <Setter Property="Opacity" TargetName="grid" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource BlueColor}" />
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect Opacity="0.5" ShadowDepth="5" Direction="315" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>